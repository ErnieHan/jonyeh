{"version":3,"sources":["Component/Layout/Layout.css.js","Component/Layout/index.js","Component/Header/index.js","App.js","serviceWorker.js","Store/reducers/index.js","index.js"],"names":["LayoutDiv","styled","div","_templateObject","Layout","props","this","react_default","a","createElement","children","React","Component","Header","className","Link","to","Home","Page404","App","HashRouter","Component_Layout","Component_Header","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","combineReducers","store","createStore","todoApp","composeWithDevTools","applyMiddleware","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"maAEO,IAAMA,QAAYC,EAAOC,IAAVC,KCQPC,mLALX,IAAMC,EAAQC,KAAKD,MACnB,OAAOE,EAAAC,EAAAC,cAACT,EAAD,KAAYK,EAAMK,iBAHRC,IAAMC,2BC0BZC,mLAxBX,OACEN,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,YACbP,EAAAC,EAAAC,cAAA,sBAEEF,EAAAC,EAAAC,cAAA,WAFF,YAMFF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,YACbP,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAI,KACRT,EAAAC,EAAAC,cAAA,oBAEFF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAI,QACRT,EAAAC,EAAAC,cAAA,6BAjBOE,IAAMC,WCGrBK,EAAO,WACX,OAAOV,EAAAC,EAAAC,cAAA,mBAGHS,EAAU,WACd,OAAOX,EAAAC,EAAAC,cAAA,uBAoBMU,mLAfX,OACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACEb,EAAAC,EAAAC,cAACY,EAAD,KACEd,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjCV,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOG,UAAWT,KAEpBX,EAAAC,EAAAC,cAAA,8BAVQG,aCFEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sFCdSb,EAFHc,0BAAgB,ICQtBC,EAAQC,sBAAYC,EAASC,8BAAoBC,8BAEvDC,IAASC,OACPjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAUP,MAAOA,GACf3B,EAAAC,EAAAC,cAACiC,EAAD,OAEFC,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.69d7df4c.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const LayoutDiv = styled.div`\n  max-width: 930px;\n  padding: 0 15px;\n  margin: 0 auto;\n`;\n","import React from \"react\";\nimport { LayoutDiv } from \"./Layout.css.js\";\n\nclass Layout extends React.Component {\n  render() {\n    const props = this.props;\n    return <LayoutDiv>{props.children}</LayoutDiv>;\n  }\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header>\n        <div className=\"header-l\">\n          <h2>\n            Johnathan\n            <br />\n            Website\n          </h2>\n        </div>\n        <div className=\"header-r\">\n          <ul>\n            <Link to={\"/\"}>\n              <li>about</li>\n            </Link>\n            <Link to={\"work\"}>\n              <li>work</li>\n            </Link>\n          </ul>\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Component/Layout\";\nimport \"./App.scss\";\nimport Header from \"./Component/Header\";\n\nconst Home = () => {\n  return <div>123</div>;\n};\n\nconst Page404 = () => {\n  return <div>Page404</div>;\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <Layout>\n          <Header />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route component={Page404} />\n          </Switch>\n          <div>Footer</div>\n        </Layout>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\n\nconst App = combineReducers({});\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport todoApp from \"./Store/reducers\";\n\nconst store = createStore(todoApp, composeWithDevTools(applyMiddleware()));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}